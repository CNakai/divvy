# TODO: Add exception types
from pathlib import Path
from zipfile import ZipFile


class SubmissionFile:
    """A student submitted file from a BBLearn assignment download.

    This object provides simple, read-only properties which represent the
    various important parts and the whole of the filename that was generated by
    BBLearn including: the username, the date submitted, and the name of the
    file as submitted.

    The format for the filenames generated by BBLearn is:
    <column name>_<username>_attempt_YYYY-MM-DD-HH-MM-SS_<name as submitted>

    """

    @staticmethod
    def __segment_bblearn_filename(filename):
        """Returns the four constituent pieces a valid BBLearn filename

        The format of a valid filename is:
        <assignment name>_<username>_attempt_<timestamp>_<name as submitted>

        If the passed filename is not valid, an exception is raised

        """
        try:
            assignment_and_username, timestamp_and_filename = \
                filename.split('_attempt_')
            assignment, username = assignment_and_username.rsplit('_',
                                                                  maxsplit=1)
            timestamp, filename = timestamp_and_filename.split('_', maxsplit=1)
        except ValueError:
            raise Exception(f"Invalid filename: {filename}")

        return {
            'submitted_for': assignment,
            'submitted_by': username,
            'submitted_on': timestamp,
            'submitted_as': filename
        }


    @classmethod
    def is_valid_bblearn_filename(cls, filename):
        try:
            cls.__segment_bblearn_filename(filename)
            return True
        except Exception:
            return False


    @classmethod
    def from_bblearn_filename(cls, filename):
        return cls(**cls.__segment_bblearn_filename(filename))


    def __init__(self, submitted_for, submitted_by, submitted_on, submitted_as):
        self.__submitted_for = submitted_for
        self.__submitted_by = submitted_by
        self.__submitted_on = submitted_on
        self.__submitted_as = submitted_as


    def __str__(self):
        return self.name


    def __repr__(self):
        return f"BBLearnFilename('{self}')"


    @property
    def bblearn_name(self):
        """The filename generated by BBLearn from the name as submitted"""
        return "_".join([self.submitted_for, self.submitted_by, 'attempt',
                         self.submitted_on, self.submitted_as])


    @property
    def submitted_as(self):
        """The filename minus BBLearn's add-ons"""
        return self.__submitted_as


    @property
    def submitted_by(self):
        """The username of the student who submitted the file"""
        return self.__submitted_by


    @property
    def submitted_on(self):
        """The timestamp for the submission attempt the file is from"""
        return self.__submitted_on


    @property
    def submitted_for(self):
        """The BBLearn assignment the file was submitted in response to"""
        return self.__submitted_for





        """
        return '_' not in self.as_bblearn.split(sep='_attempt_')[1]


