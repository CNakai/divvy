from pathlib import Path
from zipfile import ZipFile

class Filename:
    """The name of a student submitted file from a BBLearn assignment download.

    This object provides simple, read-only properties which represent the
    various important parts and the whole of the filename that was generated by
    BBLearn including: the username, the date submitted, and the name of the
    file as submitted.

    The format for the filenames generated by BBLearn is:
    <column name>_<username>_attempt_YYYY-MM-DD-HH-MM-SS_<name as submitted>

    Additionally, BBLearn also generates a submission 'manifest' for every
    submission.  This text file has a name whose format is the same as the
    above minus the final underscore and the <name as submitted>

    """


    def __init__(self, path):
        """path -- a path to a file from a BBLearn assignment download."""
        self.__bblearn_name = Path(path).name


    def __str__(self):
        return self.__bblearn_name


    def __repr__(self):
        return f"BBLearnFilename('{self}')"


    def __eq__(self, other):
        return self.__bblearn_name


    @property
    def as_bblearn(self):
        """The filename generated by BBLearn from the name as submitted"""
        return self.__bblearn_name


    @property
    def as_submitted(self):
        """The filename minus BBLearn's add-ons or, if it is a manifest, ""."""
        if self.is_submission_manifest:
            return ""

        _, timestamp_to_the_end = self.as_bblearn.split(sep='_attempt_')
        _, name_as_submitted = timestamp_to_the_end.split(sep='_', maxsplit=1)
        return name_as_submitted


    @property
    def submitter_username(self):
        """The username of the student who submitted the file"""
        front, _ = self.as_bblearn.split(sep='_attempt_')
        _, username = front.rsplit(sep='_', maxsplit=1)
        return username


    @property
    def attempt_timestamp(self):
        """The timestamp for the submission attempt the file is from"""
        _, timestamp_to_the_end = self.as_bblearn.split(sep='_attempt_')
        delim = '.' if self.is_submission_manifest else '_'
        timestamp, _ = timestamp_to_the_end.split(sep=delim, maxsplit=1)
        return timestamp


    @property
    def for_assignment(self):
        """The BBLearn assignment the file was submitted in response to"""
        front, _ = self.as_bblearn.split(sep='_attempt_')
        assignment_name, _ = front.rsplit(sep='_', maxsplit=1)
        return assignment_name


    @property
    def is_submission_manifest(self):
        """Whether or not the file is a submission manifest.

        A submission manifest is a .txt file generated by BBLearn and included
        with each submission attempt that summarizes the attempt including
        providing a list of the submitted files, the name of the submitter, the
        timestamp of the submission, etc.

        The format of the names for these files is:
        <column name>_<username>_attempt_YYYY-MM-DD-HH-MM-SS

        """
        return '_' not in self.as_bblearn.split(sep='_attempt_')[1]


